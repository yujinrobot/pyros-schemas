# tox.ini , put in same dir as setup.py
[tox]

skip_missing_interpreters=True

envlist =

  # based on ros distro with ubuntu debs base
  py27-debs_{indigo,kinetic,lunar},

  # based on ros distro with python2 base
  py27-py_{indigo,kinetic,lunar,latest},

  # Proper py3 version for LTS releases
  py34-debs_indigo,
  py35-debs_kinetic,

  # based on ros distro with ubuntu debs base
  py36-debs_{lunar},

  # based on ros distro with python3 base
  py36-py_{lunar,latest}

#, pypy
#, pypy3

[travis]
python =
  # we test every current ROS1 distro on python 2.7 (official python support for ROS1)
  2.7 : py27
  # specific old python supported natively on ubuntu/ROS LTS distro
  3.4 : py34
  3.5 : py35
  # we test every current ROS1 distro on latest python (to ensure support from latest python)
  3.6 : py36

# not tested yet
#pypy = pypy
#pypy3 = pypy3

# We depend on travis matrix
[travis:env]
ROS_DISTRO =
  kinetic: debs_kinetic, py_kinetic
  indigo: debs_indigo, py_indigo
  lunar: debs_lunar, py_lunar
  latest: py_latest

[testenv]

setenv =
    # prevent tox to create a bunch of useless bytecode files in tests/
    PYTHONDONTWRITEBYTECODE=1

# Dependencies matching the version in each ROS distro
deps =
    # TODO : check why / how install_requires are installed or not in tox environments...
    debs_indigo: -rrequirements/indigo/debs_in_venv.txt

    # Here we are relying on tools from debs
    debs_kinetic: -rrequirements/kinetic/debs_in_venv.txt
    debs_lunar: -rrequirements/lunar/debs_in_venv.txt

    py_indigo: -rrequirements/python/indigo.txt
    py_indigo: -rrequirements/python/tests.txt

    py_kinetic: -rrequirements/python/kinetic.txt
    py_kinetic: -rrequirements/python/tests.txt

    py_lunar: -rrequirements/python/lunar.txt
    py_lunar: -rrequirements/python/tests.txt

    py_latest: -rrequirements/python/latest.txt
    py_latest: -rrequirements/python/tests.txt

# to always force recreation and avoid unexpected side effects
recreate=True

changedir = tests

commands=
    # we want to make sure python finds the installed package in tox env
    # and doesn't confuse with pyc generated during dev (which happens if we use self test feature here)
    python -m pytest --basetemp={envtmpdir} test_pyros_schemas {posargs}
    # Note : -s here might break your terminal...
